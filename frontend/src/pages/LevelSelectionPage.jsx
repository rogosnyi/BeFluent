import { useNavigate } from "react-router-dom";
import { ArrowLeft } from "lucide-react";
import { useApp } from "../context/AppContext";
import { updateLevel } from "../services/api";
import LevelCard from "../components/ui/LevelCard";

const LevelSelectionPage = () => {
  const navigate = useNavigate();
  const { setSelectedLevel, refreshProgress } = useApp();

  const levels = [
    {
      level: "A1",
      title: "–ü–æ—á–∞—Ç–∫–æ–≤–∏–π",
      description: "–ë–∞–∑–æ–≤—ñ —Ñ—Ä–∞–∑–∏ —Ç–∞ –≤–∏—Ä–∞–∑–∏",
      color: "green",
      icon: "üü¢",
    },
    {
      level: "A2",
      title: "–ï–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–∏–π",
      description: "–ü—Ä–æ—Å—Ç—ñ –ø–æ–≤—Å—è–∫–¥–µ–Ω–Ω—ñ —Ç–µ–º–∏",
      color: "yellow",
      icon: "üü°",
    },
    {
      level: "B1",
      title: "–°–µ—Ä–µ–¥–Ω—ñ–π",
      description: "–†–æ–±–æ—Ç–∞, –Ω–∞–≤—á–∞–Ω–Ω—è, –ø–æ–¥–æ—Ä–æ–∂—ñ",
      color: "orange",
      icon: "üü†",
    },
    {
      level: "B2",
      title: "–í–∏—â–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ",
      description: "–°–∫–ª–∞–¥–Ω—ñ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ñ —Ç–µ–º–∏",
      color: "red",
      icon: "üî¥",
    },
    {
      level: "C1",
      title: "–ü—Ä–æ—Å—É–Ω—É—Ç–∏–π",
      description: "–í—ñ–ª—å–Ω–µ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –º–æ–≤–æ—é",
      color: "purple",
      icon: "üü£",
    },
  ];

  const handleLevelSelect = async (level) => {
    try {
      await updateLevel(level);
      setSelectedLevel(level);
      await refreshProgress();
      navigate("/lessons");
    } catch (error) {
      console.error("Error selecting level:", error);
      alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ä—ñ–≤–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }
  };

  return (
    <div className="max-w-5xl mx-auto">
      {/* Back Button */}
      <button
        onClick={() => navigate("/select-language")}
        className="flex items-center space-x-2 text-gray-600 hover:text-gray-900 mb-8 transition-colors"
      >
        <ArrowLeft className="w-5 h-5" />
        <span>–ù–∞–∑–∞–¥</span>
      </button>

      {/* Header */}
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold text-gray-900 mb-4">
          –û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó
        </h1>
        <p className="text-lg text-gray-600">
          –í–∏–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å, —è–∫–∏–π –Ω–∞–π–∫—Ä–∞—â–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∞—à–∏–º –∑–Ω–∞–Ω–Ω—è–º
        </p>
      </div>

      {/* Level Cards Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {levels.map((levelData) => (
          <LevelCard
            key={levelData.level}
            {...levelData}
            onClick={() => handleLevelSelect(levelData.level)}
          />
        ))}
      </div>

      {/* Info Text */}
      <div className="mt-12 p-6 bg-blue-50 rounded-xl border border-blue-200">
        <p className="text-sm text-gray-700 text-center">
          üí° <strong>–ü–æ—Ä–∞–¥–∞:</strong> –ù–µ –≤–ø–µ–≤–Ω–µ–Ω—ñ —É —Å–≤–æ—î–º—É —Ä—ñ–≤–Ω—ñ? –ü–æ—á–Ω—ñ—Ç—å –∑
          A1-A2 —Ç–∞ –ø–æ—Å—Ç—É–ø–æ–≤–æ –ø–µ—Ä–µ—Ö–æ–¥—å—Ç–µ –¥–æ —Å–∫–ª–∞–¥–Ω—ñ—à–∏—Ö —É—Ä–æ–∫—ñ–≤.
        </p>
      </div>
    </div>
  );
};

export default LevelSelectionPage;
